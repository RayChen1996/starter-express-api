# const typeDefs = gql`
type Question {
  id: ID!
  question: String!
  answer: String!
}

type Todo {
  id: ID!
  task: String!
  completed: Boolean!
}
type User {
  id: ID!
  username: String!
}

type ContactForm {
  id: ID!
  name: String!
  email: String!
  message: String!
  submittedAt: String!
}

type Schedule {
  id: ID!
  userId: ID!
  todo: String!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  me: User
  getSchedule: [Schedule]
  analyzeEntities(text: String!): [Entity]
}
type Entity {
  name: String
  type: String
  salience: Float
}
type Habits {
  id: ID!
  Goal: String!
  type: Int!
  frequency: String!
  fine: Int!
  note: String!
  SDate: String!
  EDate: String
}

type User {
  id: ID!
  email: String!
}

type AuthPayload {
  token: String!
}
type PetStory {
  id: ID!
  title: String!
  content: String!
  createdAt: String!
}

type Expense {
  id: ID!
  description: String!
  amount: Float!
  date: String!
  createdAt: String!
}

type HealthRecord {
  id: ID!
  description: String!
  date: String!
  reminder: Boolean!
  createdAt: String!
}

type ForumPost {
  id: ID!
  title: String!
  content: String!
  createdAt: String!
}

type Template {
  id: ID!
  name: String!
  content: String!
  createdAt: String!
}

type ContractForm {
  id: ID!
  isPublic: Boolean
  HouseSymptoms: [HouseSymptoms]
  Phone: String
  address: Address
  Name: String!
  createDT: String!
  updateDT: String!
}

type CooperativeExpert {
  id: ID!
  company: String!
  experience: Int!
  serviceItem: [String]!
  picture: String
}

type HouseSymptoms {
  id: ID!
  labelName: String!
  createDT: String!
  updateDT: String!
}

type RecommendationArticle {
  id: ID!
  tags: [String]!
  createDT: String!
  updateDT: String!
  articleLink: String
  description: String
  articleName: String
}

type Address {
  city: String!
  zone: String!
}

input AddressInput {
  city: String!
  zone: String!
}

input ContractFormInput {
  isPublic: Boolean
  HouseSymptoms: [ID]
  Phone: String
  address: AddressInput!
  Name: String!
}

input CooperativeExpertInput {
  company: String!
  experience: Int!
  serviceItem: [String]!
  picture: String
}

input RecommendationArticleInput {
  tags: [String]!
  articleLink: String
  description: String
  articleName: String
}

type Query {
  # questions: async (parent, args) => {
  #   return await Question.find({ question: { $regex: args.keyword, $options: 'i' } });
  # }
  # 取得所有聯絡表單
  contactForms: [ContactForm]
  # 根據ID取得特定聯絡表單
  contactForm(id: ID!): ContactForm
  # 取得所有合作專家
  cooperativeExperts: [CooperativeExpert]
  # 取得所有房屋症狀
  houseSymptoms: [HouseSymptoms]
  # 取得所有推薦文章
  recommendationArticles: [RecommendationArticle]

  templates: [Template]
  template(id: ID!): Template

  healthRecords: [HealthRecord]
  healthRecord(id: ID!): HealthRecord
  forumPosts: [ForumPost]
  forumPost(id: ID!): ForumPost
  users: [User]
  todos: [Todo]
  todo(id: ID!): Todo
  Habits: [Habits]

  petStories: [PetStory]
  petStory(id: ID!): PetStory

  expenses: [Expense]
  expense(id: ID!): Expense

  questions(keyword: String!): [Question]
}

type Mutation {
  # addQuestion: async (parent, args) => {
  #   const question = new Question({
  #     question: args.question,
  #     answer: args.answer
  #   });
  #   return await question.save();
  # }
  "建立問題"
  addQuestion(question: String!, answer: String!): Question
  "建立新的合約表單"
  createContractForm(input: ContractFormInput!): ContractForm
  "更新現有的合約表單"
  updateContractForm(id: ID!, input: ContractFormInput!): ContractForm
  "刪除合作專家"
  deleteContractForm(id: ID!): ContractForm

  createCooperativeExpert(input: CooperativeExpertInput!): CooperativeExpert
  updateCooperativeExpert(
    id: ID!
    input: CooperativeExpertInput!
  ): CooperativeExpert
  deleteCooperativeExpert(id: ID!): CooperativeExpert

  createHouseSymptoms(labelName: String!): HouseSymptoms
  updateHouseSymptoms(id: ID!, labelName: String!): HouseSymptoms
  deleteHouseSymptoms(id: ID!): HouseSymptoms

  createRecommendationArticle(
    input: RecommendationArticleInput!
  ): RecommendationArticle
  updateRecommendationArticle(
    id: ID!
    input: RecommendationArticleInput!
  ): RecommendationArticle
  deleteRecommendationArticle(id: ID!): RecommendationArticle

  createTemplate(name: String!, content: String!): Template
  updateTemplate(id: ID!, name: String, content: String): Template
  deleteTemplate(id: ID!): Template

  createForumPost(title: String!, content: String!): ForumPost
  updateForumPost(id: ID!, title: String, content: String): ForumPost
  deleteForumPost(id: ID!): ForumPost

  createHealthRecord(
    description: String!
    date: String!
    reminder: Boolean!
  ): HealthRecord
  updateHealthRecord(
    id: ID!
    description: String
    date: String
    reminder: Boolean
  ): HealthRecord
  deleteHealthRecord(id: ID!): HealthRecord

  register(username: String!, password: String!): AuthPayload
  login(username: String!, password: String!): AuthPayload
  addSchedule(todo: String!): Schedule

  createExpense(description: String!, amount: Float!, date: String!): Expense
  updateExpense(
    id: ID!
    description: String
    amount: Float
    date: String
  ): Expense
  deleteExpense(id: ID!): Expense

  addTodo(task: String!): Todo
  updateTodo(id: ID!, task: String!, completed: Boolean!): Todo
  deleteTodo(id: ID!): Todo
  addHabitGoal(Goal: String!): Habits
  deleteHabits: [Habits]
  submitContactForm(
    name: String!
    email: String!
    message: String!
  ): ContactForm

  createPetStory(title: String!, content: String!): PetStory
  updatePetStory(id: ID!, title: String, content: String): PetStory
  deletePetStory(id: ID!): PetStory

  updateProfile(username: String, email: String): User
  changePassword(oldPassword: String!, newPassword: String!): Boolean
}
# `;
